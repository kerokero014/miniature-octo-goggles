generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model files {
  file_id    Int       @id @default(autoincrement())
  topic_id   Int
  file_name  String    @db.VarChar(255)
  file_path  String    @db.VarChar(255)
  file_type  String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  topics     topics    @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade, onUpdate: NoAction, map: "files_ibfk_1")

  @@index([topic_id], map: "topic_id")
}

model images {
  image_id   Int       @id @default(autoincrement())
  topic_id   Int
  image_path String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  topics     topics    @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade, onUpdate: NoAction, map: "images_ibfk_1")

  @@index([topic_id], map: "topic_id")
}

model links {
  link_id     Int       @id @default(autoincrement())
  topic_id    Int
  url         String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  topics      topics    @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade, onUpdate: NoAction, map: "links_ibfk_1")

  @@index([topic_id], map: "topic_id")
}

model notes {
  note_id      Int       @id @default(autoincrement())
  topic_id     Int
  note_content String    @db.Text
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  topics       topics    @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade, onUpdate: NoAction, map: "notes_ibfk_1")

  @@index([topic_id], map: "topic_id")
}

model topics {
  topic_id        Int       @id @default(autoincrement())
  user_id         Int
  title           String    @db.VarChar(255)
  description     String?   @db.Text
  parent_topic_id Int?
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  files           files[]
  images          images[]
  links           links[]
  notes           notes[]
  users           users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "topics_ibfk_1")
  topics          topics?   @relation("topicsTotopics", fields: [parent_topic_id], references: [topic_id], onDelete: Cascade, onUpdate: NoAction, map: "topics_ibfk_2")
  other_topics    topics[]  @relation("topicsTotopics")

  @@index([parent_topic_id], map: "parent_topic_id")
  @@index([user_id], map: "user_id")
}

model users {
  user_id    Int       @id @default(autoincrement())
  username   String    @unique(map: "username") @db.VarChar(50)
  password   String    @db.VarChar(255)
  email      String    @unique(map: "email") @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  topics     topics[]
}
